apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'


def config = rootProject.ext

android {
    compileSdkVersion config.android.compileSdkVersion
    buildToolsVersion config.android.buildToolsVersion
    defaultConfig {
        applicationId "com.lyl.mvptest"
        minSdkVersion config.android.minSdkVersion
        targetSdkVersion config.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        //多渠道打包
        flavorDimensions "default"
    }
    //多渠道打包
//    productFlavors {
//        tencent {
//            applicationId "com.lyl.mvptest.tencent"
//        }
//        huawei {
//            applicationId "com.lyl.mvptest.huawei"
//        }
//    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/androidx.core_core.version'
        exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'typedefs.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'androidx.appcompat:appcompat:1.1.0-alpha04'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
//    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//    implementation 'com.google.android.material:material:1.0.0'
    implementation config.dependencies["appcompat"]
    implementation config.dependencies["constraintlayout"]
    implementation config.dependencies["lifecycle"]
    implementation config.dependencies["core-ktx"]
    implementation config.dependencies["material"]

    //okhttp+gson
//    implementation config.dependencies["okhttp"]
    implementation config.dependencies["gson"]

//    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    //glide
    implementation "com.github.bumptech.glide:glide:4.8.0"
//    implementation config.dependencies["glide"]


    //moive detail activity sliding
    implementation 'com.sothree.slidinguppanel:library:3.4.0'

    //butterknife
    implementation config.dependencies["butterknife"]
    annotationProcessor config.dependencies["butterknife-compiler"]

    //opencv 4.1.0
//    implementation project(':cv410')

    //kotlin
//    api "androidx.core:core-ktx:+"
    //todo 没搞
//    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0-beta01"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //paging
    implementation config.dependencies["paging-runtime"]

    // ViewModel and LiveData
//    def lifecycle_version = "1.1.1"
//    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    implementation config.dependencies["lifecycle"]

    // RxJava
    implementation config.dependencies["rxjava2"]
    implementation config.dependencies["rxandroid2"]

    // Retrofit
    implementation config.dependencies["adapter-rxjava2"]
    implementation config.dependencies["converter-gson"]
    implementation config.dependencies["retrofit"]


    //组件化
    implementation project(path: ':baselibrary')
    if (!config.httpappSingleRun.toBoolean()) {
        implementation project(path: ':httpapp')
    }

    //ARouter
    implementation config.dependencies["router-api"]
    annotationProcessor config.dependencies["router-compiler"]

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation project(path: ':utils')
    implementation project(path: ':lylrecycleview')
    implementation project(path: ':core')
}
repositories {
    mavenCentral()
}
